generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model likes {
  uuid_uid  String    @db.Uuid
  uuid_pid  String    @db.Uuid
  timestamp DateTime? @db.Timestamptz(6)
  posts     posts     @relation(fields: [uuid_pid], references: [uuid_pid], onDelete: NoAction, onUpdate: NoAction, map: "posts_to_likes_foreign")
  users     users     @relation(fields: [uuid_uid], references: [uuid_uid], onDelete: NoAction, onUpdate: NoAction, map: "users_to_likes_foreign")

  @@id([uuid_uid, uuid_pid], map: "likes_composite_primary")
}

model posts {
  title                  String            @db.VarChar(100)
  title_lower            String            @db.VarChar(100)
  title_tags_search_text String            @db.VarChar(500)
  top_image              String?           @db.VarChar(2048)
  top_link               String?           @db.VarChar(2048)
  content_type           Int               @db.SmallInt
  likes_num              Int               @default(0)
  timestamp              DateTime?         @db.Timestamptz(6)
  publish                Boolean           @default(false)
  deleted                Boolean           @default(false)
  uuid_pid               String            @id(map: "posts_primary") @unique(map: "uuid_pid_unique") @db.Uuid
  uuid_uid               String            @db.Uuid
  article_contents       article_contents?
  folder_posts           folder_posts[]
  likes                  likes[]
  post_tags              post_tags[]
  users                  users             @relation(fields: [uuid_uid], references: [uuid_uid], onDelete: NoAction, onUpdate: NoAction, map: "user_uuid_to_posts_foreign")
  source_contents        source_contents?

  @@index([uuid_uid], map: "fki_user_uuid_to_posts_foreign")
  @@index([title_tags_search_text(ops: raw("gin_bigm_ops"))], map: "pg_idx_title_tags_text", type: Gin)
  @@index([uuid_uid], map: "fki_user_uuid_to_link_collections_foreign")
}

model tags {
  tid             Int         @id @default(autoincrement())
  tag_name        String      @unique(map: "tag_name_unique") @db.VarChar(30)
  display_name    String      @db.VarChar(40)
  tag_image       String?     @db.VarChar(2048)
  tag_content_num Int         @default(0)
  post_tags       post_tags[]
  user_tags       user_tags[]
}

model users {
  uid                                  String             @id @db.VarChar(28)
  user_name                            String?            @db.VarChar(255)
  user_image                           String?            @db.VarChar(2048)
  comment                              String?            @db.VarChar(255)
  follower_num                         Int                @default(0)
  followee_num                         Int                @default(0)
  lang_type                            Int                @default(0) @db.SmallInt
  uuid_uid                             String             @unique(map: "uuid_unique") @db.Uuid
  collections                          collections[]
  folder_posts                         folder_posts[]
  folders                              folders[]
  follows_follows_followee_uuidTousers follows[]          @relation("follows_followee_uuidTousers")
  follows_follows_follower_uuidTousers follows[]          @relation("follows_follower_uuidTousers")
  likes                                likes[]
  link_collections                     link_collections[]
  links                                links[]
  posts                                posts[]
  user_tags                            user_tags[]
}

model post_tags {
  tid       Int
  timestamp DateTime? @db.Timestamptz(6)
  uuid_pid  String    @db.Uuid
  posts     posts     @relation(fields: [uuid_pid], references: [uuid_pid], onDelete: NoAction, onUpdate: NoAction, map: "posts_to_post_tags_foreign")
  tags      tags      @relation(fields: [tid], references: [tid], onDelete: NoAction, onUpdate: NoAction, map: "tags_to_post_tags_foreign")

  @@id([uuid_pid, tid], map: "post_tags_composite_primary")
}

model source_contents {
  source_link String @db.VarChar(2048)
  source_type Int    @db.SmallInt
  description Json
  uuid_pid    String @id(map: "uuid_pid_primary") @db.Uuid
  posts       posts  @relation(fields: [uuid_pid], references: [uuid_pid], onDelete: NoAction, onUpdate: NoAction, map: "post_to_souce_contents_forein")
}

model article_contents {
  content  Json
  uuid_pid String @id(map: "article_contents_primary") @db.Uuid
  posts    posts  @relation(fields: [uuid_pid], references: [uuid_pid], onDelete: NoAction, onUpdate: NoAction, map: "post_to_blog_contents_foreign")
}

model collections {
  cid              Int                @id(map: "cid_primary") @default(autoincrement())
  uuid_uid         String             @db.Uuid
  collection_name  String             @db.VarChar(50)
  deleted          Boolean            @default(false)
  users            users              @relation(fields: [uuid_uid], references: [uuid_uid], onDelete: NoAction, onUpdate: NoAction, map: "users_to_collections_foreign")
  link_collections link_collections[]

  @@index([uuid_uid], map: "fki_user_uuid_to_collections_foreign")
}

model link_collections {
  lid         Int
  cid         Int
  uuid_uid    String      @db.Uuid
  deleted     Boolean     @default(false)
  collections collections @relation(fields: [cid], references: [cid], onDelete: NoAction, onUpdate: NoAction, map: "collections_to_link_collections_foreign")
  links       links       @relation(fields: [lid], references: [lid], onDelete: NoAction, onUpdate: NoAction, map: "links_to_link_collections_foreign")
  users       users       @relation(fields: [uuid_uid], references: [uuid_uid], onDelete: NoAction, onUpdate: NoAction, map: "users_to_link_collections_foreign")

  @@id([lid, cid], map: "link_collection_composite_primary")
}

model links {
  lid              Int                @id(map: "links_primary") @default(autoincrement())
  uuid_uid         String             @db.Uuid
  link_name        String             @db.VarChar(50)
  image_path       String?            @db.VarChar(2048)
  explanation      String?            @db.VarChar(100)
  url_scheme       String             @db.VarChar(500)
  query            String?            @db.VarChar(50)
  joint            String?            @db.VarChar(50)
  other_queries    String?            @db.VarChar(500)
  genre            Int                @db.SmallInt
  is_path_search   Boolean            @default(false)
  publish          Boolean            @default(false)
  timestamp        DateTime?          @db.Timestamptz(6)
  link_collections link_collections[]
  users            users              @relation(fields: [uuid_uid], references: [uuid_uid], onDelete: NoAction, onUpdate: NoAction, map: "users_to_likes_foreign")

  @@index([uuid_uid], map: "fki_user_uuid_to_links_foreign")
}

model follows {
  follower_uuid                      String @db.Uuid
  followee_uuid                      String @db.Uuid
  users_follows_followee_uuidTousers users  @relation("follows_followee_uuidTousers", fields: [followee_uuid], references: [uuid_uid], onDelete: NoAction, onUpdate: NoAction, map: "users_followee_foreign")
  users_follows_follower_uuidTousers users  @relation("follows_follower_uuidTousers", fields: [follower_uuid], references: [uuid_uid], onDelete: NoAction, onUpdate: NoAction, map: "users_follower_foreign")

  @@id([follower_uuid, followee_uuid], map: "follows_composite_primary")
  @@index([followee_uuid], map: "idx_followee_uuid")
  @@index([follower_uuid], map: "idx_follower_uuid")
}

model folder_posts {
  fid       Int
  uuid_pid  String    @db.Uuid
  timestamp DateTime? @db.Timestamptz(6)
  uuid_uid  String    @db.Uuid
  folders   folders   @relation(fields: [fid], references: [fid], onDelete: NoAction, onUpdate: NoAction, map: "fid_foreign_key")
  posts     posts     @relation(fields: [uuid_pid], references: [uuid_pid], onDelete: NoAction, onUpdate: NoAction, map: "uuid_pid_foreign_key")
  users     users     @relation(fields: [uuid_uid], references: [uuid_uid], onDelete: NoAction, onUpdate: NoAction, map: "uuid_uid_foreign_key")

  @@id([fid, uuid_pid], map: "folder_posts_pkey_conbined")
}

model folders {
  fid          Int            @id @default(autoincrement())
  uuid_uid     String         @db.Uuid
  title        String         @db.VarChar(100)
  top_image    String?        @db.VarChar
  timestamp    DateTime?      @db.Timestamptz(6)
  folder_posts folder_posts[]
  users        users          @relation(fields: [uuid_uid], references: [uuid_uid], onDelete: NoAction, onUpdate: NoAction, map: "uuid_uid_foreign_folders_from_users")
}

model user_tags {
  uuid_uid  String    @db.Uuid
  tid       Int
  timestamp DateTime? @db.Timestamptz(6)
  tags      tags      @relation(fields: [tid], references: [tid], onDelete: NoAction, onUpdate: NoAction, map: "tid_foreign_key")
  users     users     @relation(fields: [uuid_uid], references: [uuid_uid], onDelete: NoAction, onUpdate: NoAction, map: "uuid_uid_foreign_key")

  @@id([uuid_uid, tid], map: "pkey_user_tags_conbined")
}
