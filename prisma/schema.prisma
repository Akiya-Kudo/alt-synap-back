generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model blog_contents {
  pid     Int   @id
  content Json
  posts   posts @relation(fields: [pid], references: [pid], onDelete: NoAction, onUpdate: NoAction, map: "post_to_blog_content")
}

model likes {
  lid   Int    @id @default(autoincrement())
  pid   Int
  uid   String @db.VarChar(28)
  users users  @relation(fields: [uid], references: [firebase_id], onDelete: NoAction, onUpdate: NoAction, map: "firebase_id_to_uid")
  posts posts  @relation(fields: [pid], references: [pid], onDelete: NoAction, onUpdate: NoAction, map: "pid_to_pid")
}

model posts {
  pid             Int              @id @default(autoincrement())
  uid             String           @db.VarChar(28)
  title           String           @db.VarChar(60)
  top_image       String?          @db.VarChar
  top_link        String?          @db.VarChar
  content_type    Int              @db.SmallInt
  likes_num       Int              @default(0)
  update_time     DateTime         @db.Timestamp(6)
  publish         Boolean          @default(false)
  deleted         Boolean          @default(false)
  pid_uuid        String           @db.Uuid
  users           users            @relation(fields: [uid], references: [firebase_id], onDelete: NoAction, onUpdate: NoAction, map: "user_to_posts")
  blog_contents   blog_contents?
  likes           likes[]
  post_tags       post_tags[]
  source_contents source_contents?
}

model tags {
  tid             Int         @id @default(autoincrement())
  tag_name        String      @db.VarChar(30)
  tag_content_num Int         @default(0)
  post_tags       post_tags[]
}

model users {
  firebase_id  String  @id @db.VarChar(28)
  photo_url    String? @db.VarChar
  comment      String? @db.VarChar(150)
  user_name    String? @db.VarChar(50)
  follower_num Int     @default(0)
  followee_num Int     @default(0)
  lang_type    Int     @default(0) @db.SmallInt
  color_mode   Int     @default(0) @db.SmallInt
  likes        likes[]
  posts        posts[]
}

model post_tags {
  post_tag_id Int   @id(map: "posts_tags_pkey") @default(autoincrement())
  pid         Int
  tid         Int
  posts       posts @relation(fields: [pid], references: [pid], onDelete: NoAction, onUpdate: NoAction, map: "posts_to_posttag")
  tags        tags  @relation(fields: [tid], references: [tid], onDelete: NoAction, onUpdate: NoAction, map: "tags_to_posttag")
}

model source_contents {
  pid         Int     @id(map: "slide_contents_pkey")
  source_link String? @db.VarChar
  source_type Int     @db.SmallInt
  description Json
  posts       posts   @relation(fields: [pid], references: [pid], onDelete: NoAction, onUpdate: NoAction, map: "post_to_slide_contents")
}
