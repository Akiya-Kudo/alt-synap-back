generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model likes {
  uuid_uid  String   @db.Uuid
  uuid_pid  String   @db.Uuid
  timestamp DateTime @db.Timestamptz(6)
  posts     posts    @relation(fields: [uuid_pid], references: [uuid_pid], onDelete: NoAction, onUpdate: NoAction, map: "posts_to_likes_foreign")
  users     users    @relation(fields: [uuid_uid], references: [uuid_uid], onDelete: NoAction, onUpdate: NoAction, map: "users_to_likes_foreign")

  @@id([uuid_uid, uuid_pid], map: "likes_composite_primary")
}

model posts {
  title            String            @db.VarChar(60)
  top_image        String?           @db.VarChar
  top_link         String?           @db.VarChar
  content_type     Int               @db.SmallInt
  likes_num        Int               @default(0)
  timestamp        DateTime?         @db.Timestamptz(6)
  publish          Boolean           @default(false)
  deleted          Boolean           @default(false)
  uuid_pid         String            @id(map: "posts_primary") @unique(map: "uuid_pid_unique") @db.Uuid
  uuid_uid         String            @db.Uuid
  article_contents article_contents?
  likes            likes[]
  post_tags        post_tags[]
  users            users             @relation(fields: [uuid_uid], references: [uuid_uid], onDelete: NoAction, onUpdate: NoAction, map: "user_uuid_to_posts_foreign")
  source_contents  source_contents?

  @@index([uuid_uid], map: "fki_user_uuid_to_posts_foreign")
}

model tags {
  tid             Int         @id @default(autoincrement())
  tag_name        String      @db.VarChar(30)
  tag_content_num Int         @default(0)
  post_tags       post_tags[]
}

model users {
  uid          String  @id @db.VarChar(28)
  comment      String? @db.VarChar(150)
  follower_num Int     @default(0)
  followee_num Int     @default(0)
  lang_type    Int     @default(0) @db.SmallInt
  uuid_uid     String  @unique(map: "uuid_unique") @db.Uuid
  likes        likes[]
  posts        posts[]
}

model post_tags {
  tid       Int
  timestamp DateTime @db.Timestamptz(6)
  uuid_pid  String   @db.Uuid
  posts     posts    @relation(fields: [uuid_pid], references: [uuid_pid], onDelete: NoAction, onUpdate: NoAction, map: "posts_to_post_tags_foreign")
  tags      tags     @relation(fields: [tid], references: [tid], onDelete: NoAction, onUpdate: NoAction, map: "tags_to_post_tags_foreign")

  @@id([uuid_pid, tid], map: "post_tags_composite_primary")
}

model source_contents {
  source_link String @db.VarChar
  source_type Int    @db.SmallInt
  description Json
  uuid_pid    String @id(map: "uuid_pid_primary") @db.Uuid
  posts       posts  @relation(fields: [uuid_pid], references: [uuid_pid], onDelete: NoAction, onUpdate: NoAction, map: "post_to_souce_contents_forein")
}

model article_contents {
  content  Json
  uuid_pid String @id(map: "article_contents_primary") @db.Uuid
  posts    posts  @relation(fields: [uuid_pid], references: [uuid_pid], onDelete: NoAction, onUpdate: NoAction, map: "post_to_blog_contents_foreign")
}
