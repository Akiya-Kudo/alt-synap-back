# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ArticleContent {
  content: JSONObject
  posts: Post
  uuid_pid: ID!
}

input ArticleContentInput {
  content: JSONObject!
}

type Collection {
  cid: Int!
  collection_name: String
  deleted: Boolean
  link_collections: [LinkCollection!]
  users: User
  uuid_uid: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Folder {
  fid: Int!
  folder_posts: [FolderPost!]
  timestamp: DateTime
  title: String
  top_image: String
  users: User
  uuid_uid: String
}

type FolderPost {
  fid: Int!
  folders: Folder
  posts: Post
  timestamp: DateTime
  uuid_pid: String!
  uuid_uid: String!
}

type Follow {
  followee_uuid: ID!
  follower_uuid: ID!
  users_follows_followee_uuidTousers: User
  users_follows_follower_uuidTousers: User
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Like {
  posts: Post
  timestamp: DateTime
  users: User
  uuid_pid: ID!
  uuid_uid: ID!
}

type Link {
  explanation: String
  genre: Int
  image_path: String
  is_path_search: Boolean
  joint: String
  lid: Int!
  link_collections: [LinkCollection!]
  link_name: String
  other_queries: String
  publish: Boolean
  query: String
  timestamp: DateTime
  url_scheme: String
  users: User
  uuid_uid: String
}

type LinkCollection {
  cid: ID!
  collections: Collection
  deleted: Boolean
  lid: ID!
  links: Link
  users: User
  uuid_uid: String
}

type Mutation {
  add_link_to_collection(cid: Int!, lid: Int!, uuid_uid: String!): LinkCollection!
  add_posts_to_folder(fid: Int!, uuid_pids: [String!]!): [FolderPost!]!
  create_collection(collection_name: String!, uuid_uid: String!): Collection!
  create_link(linkData: createLinkInput!): Link!
  create_user(userData: createUserInput!): User!
  delete_folder(fid: Int!): Folder!
  delete_link(lid: Int!): Link!
  delete_link_collection(lid: Int!, uuid_uid: String!): [LinkCollection!]!
  delete_post(uuid_pid: String!): Post!
  delete_posts_from_folder(fid: Int!, uuid_pids: [String!]!): [FolderPost!]!
  favorite_tag_toggle(tid: Int!): UserTag!
  follow_toggle(followee_uuid: String!): Follow!
  like_toggle(uuid_pid: String!): Like!
  remove_collection(cid: Int!): Collection!
  remove_link_from_collection(cid: Int!, lid: Int!): LinkCollection!
  update_user_info(userData: updateUserInput!): User!
  upsert_article_post(postData: upsertArticlePostInput!): upsertArticlePostOutput!
  upsert_folder(folderData: upsertFolderInput!): Folder!
  upsert_link_post(postData: upsertLinkPostInput!): upsertLinkPostOutput!
}

type Post {
  article_contents: ArticleContent
  content_type: Int
  deleted: Boolean
  folder_posts: [FolderPost!]
  likes: [Like!]
  likes_num: Int
  post_tags: [PostTag!]
  publish: Boolean
  source_contents: SourceContent
  timestamp: DateTime
  title: String
  title_lower: String
  title_tags_search_text: String
  top_image: String
  top_link: String
  users: User
  uuid_pid: ID!
  uuid_uid: String
}

type PostTag {
  posts: Post
  tags: Tag
  tid: Int
  timestamp: DateTime
  uuid_pid: ID
}

type Query {
  count_folder_posts(fid: Int!): Int!
  count_posts_made_by_user(selectedTagIds: [Int], uuid_uid: String!): Int!
  count_posts_user_liked(selectedTagIds: [Int]): Int!
  count_total_posts(searchString: String, selectedTagId: Int): Float!
  get_folder_posts(fid: Int!, offset: Int!): [FolderPost!]!
  get_follow_list(is_follower_list: Boolean!, offset: Int!, uuid_uid: String!): [Follow!]!
  get_link_collections_used(uuid_uid: String!): [LinkCollection!]
  get_link_made_by_user(uuid_uid: String!): [Link!]
  get_posts_made_by_user(no_pagenation: Boolean!, offset: Int!, selectedTagIds: [Int], uuid_uid: String!): [Post!]!
  get_posts_user_follow(offset: Int!): [Post!]!
  get_posts_user_liked(offset: Int!, selectedTagIds: [Int]): [Post!]!
  get_published_links: [Link!]
  hot_tags: [Tag!]!
  other_user(uuid_uid: String!): User
  post(uuid_pid: String!): Post!
  search_post(offset: Int!, searchString: String, selectedTagId: Int, sortType: Int!): [Post!]!
  search_tag(searchString: String!): [Tag!]!
  tag(tid: Int!): Tag!
  user(uid: String!): User
}

type SourceContent {
  description: JSONObject
  posts: Post
  source_link: String
  source_type: Int
  uuid_pid: ID!
}

type Tag {
  display_name: String
  post_tags: [PostTag!]
  tag_content_num: Int
  tag_image: String
  tag_name: String
  tid: Int
  user_tags: [UserTag!]
}

input TagInput {
  tag_name: String!
  tid: Int
}

type User {
  collections: [Collection!]
  comment: String
  fodler_posts: [FolderPost!]
  folders: [Folder!]
  followee_num: Int
  follower_num: Int
  follows_follows_followee_uuidTousers: [Follow!]
  follows_follows_follower_uuidTousers: [Follow!]
  lang_type: Int
  likes: [Like!]
  link_collections: [LinkCollection!]
  links: [Link!]
  posts: [Post!]
  top_collection: Int
  uid: ID
  user_image: String
  user_name: String
  user_tags: [UserTag!]
  uuid_uid: ID
}

type UserTag {
  tags: Tag
  tid: Int
  timestamp: DateTime
  users: User
  uuid_uid: String
}

input createLinkInput {
  explanation: String
  genre: Int!
  image_path: String
  is_path_search: Boolean!
  joint: String
  link_name: String!
  other_queries: String
  publish: Boolean!
  query: String
  url_scheme: String!
}

input createUserInput {
  lang_type: Int
  uid: ID!
  uuid_uid: ID!
}

input updateUserInput {
  comment: String
  user_image: String
  user_name: String!
}

input upsertArticlePostInput {
  articleContent: ArticleContentInput!
  content_type: Int!
  deleted: Boolean!
  publish: Boolean!
  tags: [TagInput]!
  title: String!
  top_image: String
  top_link: String
  uuid_pid: ID
}

type upsertArticlePostOutput {
  post: Post!
  tags: [Tag]!
}

input upsertFolderInput {
  fid: Int
  title: String
  top_image: String
}

input upsertLinkPostInput {
  content_type: Int!
  publish: Boolean!
  title: String!
  top_link: String
  uuid_pid: ID
}

type upsertLinkPostOutput {
  post: Post!
}